Ext.data.JsonP.Ext_Function({"singleton":true,"statics":{"property":[],"event":[],"css_var":[],"method":[],"css_mixin":[],"cfg":[]},"parentMixins":[],"html_meta":{},"mixins":[],"code_type":"assignment","inheritable":false,"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Function.html#Ext-Function' target='_blank'>Function.js</a></div></pre><div class='doc-contents'><p>関数のコールバックを扱うのに便利な、静的メソッドのコレクション。</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-alias' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-alias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-alias' class='name expandable'>alias</a>( <span class='pre'>Object/Function object, String methodName</span> ) : Function</div><div class='description'><div class='short'<p>渡されたobjectのmethodNameに、提供されているメソッドのエイリアスを作成します。...</p></div><div class='long'><p>渡されたobjectのmethodNameに、提供されているメソッドのエイリアスを作成します。\n実行時のスコープは、渡されたobjectになることに注意してください。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object/Function<div class='sub-desc'><p></p>\n</div></li><li><span class='pre'>methodName</span> : String<div class='sub-desc'><p></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>エイリアス関数</p>\n</div></li></ul></div></div></div><div id='method-bind' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-bind' class='name expandable'>bind</a>( <span class='pre'>Function fn, Object scope, Array args, Boolean/Number appendArgs</span> ) : Function</div><div class='description'><div class='short'<p>提供されている関数（fn）から新しい関数を作成します。\n関数実行時のスコープ（this）を変更...</p></div><div class='long'><p>提供されている関数（fn）から新しい関数を作成します。\n関数実行時のスコープ（this）を変更することが可能です。\nまた、呼び出し時の引数をオーバーライドすることが可能です（デフォルトは、元の関数の引数）。</p>\n\n<p><a href=\"#!/api/Ext-method-bind\" rel=\"Ext-method-bind\" class=\"docClass\">Ext.bind</a>\nは\n<a href=\"#!/api/Ext.Function-method-bind\" rel=\"Ext.Function-method-bind\" class=\"docClass\">\nのエイリアスです。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>デリゲートされる関数。\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 関数実行時のスコープ（this参照）。\n<strong>省略された場合、デフォルトはブラウザのwindowオブジェクトになります。</strong>\n</p>\n</div></li><li><span class='pre'>args</span> : Array<div class='sub-desc'><p>(オプション) オーバーライドする引数。（デフォルトは元の引数をそのまま渡します）\n</p>\n</div></li><li><span class='pre'>appendArgs</span> : Boolean/Number<div class='sub-desc'><p>(オプション) trueを設定した場合、オーバーライドする代わりに元の引数にargsで指定した値を追加します。\n数値を指定した場合、指定した位置へargsで指定した値を挿入します。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>新しい関数</p>\n</div></li></ul></div></div></div><div id='method-createBuffered' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-createBuffered' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-createBuffered' class='name expandable'>createBuffered</a>( <span class='pre'>Function fn, Number buffer, Object scope, Array args</span> ) : Function</div><div class='description'><div class='short'<p>デリゲート関数を作成します。必要に応じて実行時のスコープを変更したり、渡された関数の実行をミリ...</p></div><div class='long'><p>デリゲート関数を作成します。必要に応じて実行時のスコープを変更したり、渡された関数の実行をミリ秒単位で遅らせて実行したりすることが可能です。\n実行を遅らせている間に関数が再度呼び出された場合、遅らされていた関数の実行はキャンセルされ、呼び出された関数のタイムアウト期間が開始されます。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>タイマーによって呼び出される関数。\n</p>\n</div></li><li><span class='pre'>buffer</span> : Number<div class='sub-desc'><p>関数を呼び出す際に遅らせるミリ秒。\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 渡された関数呼び出し時のスコープ （this）。\n指定しない場合、デフォルトは呼び出し元の関数のスコープとなります。\n</p>\n</div></li><li><span class='pre'>args</span> : Array<div class='sub-desc'><p>(オプション) 呼び出し時の引数をオーバーライドします。 デフォルトは呼び出し元に渡される引数です。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>渡された関数を指定時間後に呼び出す関数。</p>\n</div></li></ul></div></div></div><div id='method-createDelayed' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-createDelayed' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-createDelayed' class='name expandable'>createDelayed</a>( <span class='pre'>Function fn, Number delay, Object scope, Array args, Boolean/Number appendArgs</span> ) : Function</div><div class='description'><div class='short'<p>呼び出されたときに指定時間後に実行するコールバック関数を作成します。</p></div><div class='long'><p>呼び出されたときに指定時間後に実行するコールバック関数を作成します。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>返される関数を呼び出すと、ここで指定した関数が指定時間遅れて実行されます。 必要に応じて、引数リストを追加・置換してください。\n</p>\n</div></li><li><span class='pre'>delay</span> : Number<div class='sub-desc'><p>呼び出される毎に関数実行を遅らせるミリ秒。\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 関数実行時のスコープ（this）。\n</p>\n</div></li><li><span class='pre'>args</span> : Array<div class='sub-desc'><p>(オプション) 呼び出し時にオーバーライドする引数。（デフォルトは呼び出し元に渡される引数）\n</p>\n</div></li><li><span class='pre'>appendArgs</span> : Boolean/Number<div class='sub-desc'><p>(オプション) trueを設定した場合、オーバーライドする代わりに元の引数にargsで指定した値を追加します。 数値を指定した場合、指定した位置へargsで指定した値を挿入します。\n\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>この関数が呼び出されると、渡された関数を指定時間後に実行します。</p>\n</div></li></ul></div></div></div><div id='method-createInterceptor' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-createInterceptor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-createInterceptor' class='name expandable'>createInterceptor</a>( <span class='pre'>Function origFn, Function newFn, Object scope, Object returnValue</span> ) : Function</div><div class='description'><div class='short'<p>インターセプター関数を作成します。 第一引数で渡された関数が実行される前に、第二引数で渡された...</p></div><div class='long'><p>インターセプター関数を作成します。 第一引数で渡された関数が実行される前に、第二引数で渡された関数が実行されます。 この関数がfalseを返した場合、第一引数で渡された関数は呼び出されません。 このような場合、作成された関数はnull、もしくはreturnValueで設定した値を返します。 そうでない場合は第一引数の関数の実行結果が返されます。 使用例:</p>\n\n<pre><code>var sayHi = function (name){\n    alert('Hi, ' + name);\n}\nsayHi('Fred');\n// alerts \"Hi, Fred\"\n// create a new function that validates input without\n// directly modifying the original function:\nvar sayHiToFriend = Ext.Function.createInterceptor(sayHi, function (name){\n    return name == 'Brian';\n});\nsayHiToFriend('Fred');\n// no alert\nsayHiToFriend('Brian');\n// alerts \"Hi, Brian\"\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origFn</span> : Function<div class='sub-desc'><p>元の関数。\n</p>\n</div></li><li><span class='pre'>newFn</span> : Function<div class='sub-desc'><p>元の関数が実行される前に実行される関数（判定などの関数で、戻り値が真偽型）\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 関数実行時のスコープ（this）。\n<strong>省略された場合、デフォルトは元の関数、またはブラウザのwindowオブジェクトになります。</strong>\n</p>\n</div></li><li><span class='pre'>returnValue</span> : Object<div class='sub-desc'><p>(オプション) 第二引数で渡した関数がfalseを返した場合に、この関数が返す値（デフォルトはnullです）。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>新しい関数</p>\n</div></li></ul></div></div></div><div id='method-createSequence' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-createSequence' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-createSequence' class='name expandable'>createSequence</a>( <span class='pre'>Function origFn, Function newFn, Object scope</span> ) : Function</div><div class='description'><div class='short'<p>第一引数で渡された関数を呼び出した後に、第二引数で渡された関数を呼び出すシーケンスを作成します...</p></div><div class='long'><p>第一引数で渡された関数を呼び出した後に、第二引数で渡された関数を呼び出すシーケンスを作成します。\n結果は第一引数の関数の結果を返します。\n第二引数の関数への引数は、第一引数の関数に渡された引数を使用します。</p>\n\n<pre><code>var sayHi = function(name){\n    alert('Hi, ' + name);\n}\n\nsayHi('Fred'); // alerts \"Hi, Fred\"\n\nvar sayGoodbye = Ext.Function.createSequence(sayHi, function(name){\n    alert('Bye, ' + name);\n});\n\nsayGoodbye('Fred'); // both alerts show\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>origFn</span> : Function<div class='sub-desc'><p>元の関数。\n</p>\n</div></li><li><span class='pre'>newFn</span> : Function<div class='sub-desc'><p>元の関数の後に呼び出される関数。\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 関数実行時のスコープ（this）。\n省略された場合、デフォルトは元の関数、またはブラウザのwindowオブジェクトになります。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>新しい関数</p>\n</div></li></ul></div></div></div><div id='method-createThrottled' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-createThrottled' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-createThrottled' class='name expandable'>createThrottled</a>( <span class='pre'>Function fn, Number interval, Object scope</span> ) : Function</div><div class='description'><div class='short'<p>前回の実行から指定時間後に再度実行する関数を作成します。 指定時間内にコールされた関数は実行さ...</p></div><div class='long'><p>前回の実行から指定時間後に再度実行する関数を作成します。 指定時間内にコールされた関数は実行されず、最後にコールされた関数のみが指定時間後に実行されます。</p>\n\n<p>これはマウスのmoveイベントをハンドリングするような、繰り返し呼び出されることが想定される処理に対して役立ちます。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>一定の時間間隔で実行される関数。\n</p>\n</div></li><li><span class='pre'>interval</span> : Number<div class='sub-desc'><p>渡された関数が実行されるミリ秒間隔の時間。\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 渡された関数実行時のスコープ（this）。 指定しない場合、デフォルトは呼び出し元の関数のスコープとなります。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>指定時間後に繰り返し呼び出される関数。</p>\n</div></li></ul></div></div></div><div id='method-defer' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-defer' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-defer' class='name expandable'>defer</a>( <span class='pre'>Function fn, Number millis, Object scope, Array args, Boolean/Number appendArgs</span> ) : Number</div><div class='description'><div class='short'<p>指定したミリ秒後に、渡された関数を設定されたスコープで呼び出します。 使用例:</p></div><div class='long'><p>指定したミリ秒後に、渡された関数を設定されたスコープで呼び出します。 使用例:</p>\n\n<pre><code>var sayHi = function(name){\n    alert('Hi, ' + name);\n}\n\n// すぐに実行:\nsayHi('Fred');\n\n// 2秒後に実行:\nExt.Function.defer(sayHi, 2000, this, ['Fred']);\n\n// この構文は、匿名関数を遅らせて\n// 実行する場合に便利です:\nExt.Function.defer(function(){\n    alert('Anonymous');\n}, 100);\n</code></pre>\n\n<p><a href=\"#/api/Ext-method-defer\" rel=\"Ext-method-defer\" class=\"docClass\" id=\"ext-gen1356\">Ext.defer</a> は <a href=\"#/api/Ext.Function-method-defer\" rel=\"Ext.Function-method-defer\" class=\"docClass\" id=\"ext-gen1357\">Ext.Function.defer</a>のエイリアスです。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>遅らせて実行する関数。\n</p>\n</div></li><li><span class='pre'>millis</span> : Number<div class='sub-desc'><p>setTimeout使用時に設定するミリ秒   \n<br />\n（0を指定した場合、即時実行されます）\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 関数実行時のスコープ（this）。\n<br />\n<strong>省略された場合、デフォルトはブラウザのwindowオブジェクトになります。</strong>\n</p>\n</div></li><li><span class='pre'>args</span> : Array<div class='sub-desc'><p>(オプション) 呼び出し時にオーバーライドする引数。\n（デフォルトは呼び出し元に渡される引数）\n</p>\n</div></li><li><span class='pre'>appendArgs</span> : Boolean/Number<div class='sub-desc'><p>(オプション) trueを設定した場合、オーバーライドする代わりに元の引数にargsで指定した値を追加します。\n数値を指定した場合、指定した位置へargsで指定した値を挿入します。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>clearTimeoutで使用可能なタイムアウトID</p>\n</div></li></ul></div></div></div><div id='method-flexSetter' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-flexSetter' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-flexSetter' class='name expandable'>flexSetter</a>( <span class='pre'>Function setter</span> ) : Function</div><div class='description'><div class='short'<p>フレームワーク全体で非常に一般的に使用されているメソッドです。\nメソッドのラッパーとして使用さ...</p></div><div class='long'><p>フレームワーク全体で非常に一般的に使用されているメソッドです。\nメソッドのラッパーとして使用されます。\nラップされた関数は、以下のような「柔軟な」値の設定が可能です。</p>\n\n<ul>\n<li>name と value の２つの引数を設定します</li>\n<li>一つのオブジェクトに、name - value のペアを複数設定します</li>\n</ul>\n\n<p>For example:</p>\n\n<pre><code>var setValue = Ext.Function.flexSetter(function(name, value) {\n    this[name] = value;\n});\n\n// 次に、\n// name - value の１つのペアを指定\nsetValue('name1', 'value1');\n\n// name - value のペアを複数指定\nsetValue({\n    name1: 'value1',\n    name2: 'value2',\n    name3: 'value3'\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>setter</span> : Function<div class='sub-desc'><p></p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>flexSetter</p>\n</div></li></ul></div></div></div><div id='method-pass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Ext.Function'>Ext.Function</span><br/><a href='source/Function.html#Ext-Function-method-pass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Ext.Function-method-pass' class='name expandable'>pass</a>( <span class='pre'>Function fn, Array args, Object scope</span> ) : Function</div><div class='description'><div class='short'<p>渡された関数を、あらかじめ指定された引数で実行する関数を作成します。\nこの関数に引数を指定して...</p></div><div class='long'><p>渡された関数を、あらかじめ指定された引数で実行する関数を作成します。\nこの関数に引数を指定して呼び出した場合、その引数はあらかじめ設定された引数の後に追加されます。\nコールバック関数を作成したいときに役立ちます。</p>\n\n<p>使用例:</p>\n\n<pre><code>var originalFunction = function(){\n    alert(Ext.Array.from(arguments).join(' '));\n};\n\nvar callback = Ext.Function.pass(originalFunction, ['Hello', 'World']);\n\ncallback(); // alertで 'Hello World' と表示されます\ncallback('by Me'); // alertで 'Hello World by Me' と表示されます。\n</code></pre>\n\n<p><a href=\"#!/api/Ext-method-pass\" rel=\"Ext-method-pass\" class=\"docClass\">Ext.pass</a>\nは\n<a href=\"#!/api/Ext.Function-method-pass\" rel=\"Ext.Function-method-pass\" class=\"docClass\">Ext.Function.pass</a>\nのエイリアスです。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>元の関数。\n</p>\n</div></li><li><span class='pre'>args</span> : Array<div class='sub-desc'><p>コールバック関数へ渡される引数\n</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>(オプション) 関数実行時のスコープ（this）。\n</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>新しいコールバック関数</p>\n</div></li></ul></div></div></div></div></div></div></div>","subclasses":[],"meta":{},"aliases":{},"members":{"property":[],"css_var":[],"event":[],"method":[{"owner":"Ext.Function","meta":{},"name":"alias","id":"method-alias","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"bind","id":"method-bind","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"createBuffered","id":"method-createBuffered","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"createDelayed","id":"method-createDelayed","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"createInterceptor","id":"method-createInterceptor","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"createSequence","id":"method-createSequence","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"createThrottled","id":"method-createThrottled","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"defer","id":"method-defer","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"flexSetter","id":"method-flexSetter","tagname":"method"},{"owner":"Ext.Function","meta":{},"name":"pass","id":"method-pass","tagname":"method"}],"css_mixin":[],"cfg":[]},"superclasses":[],"component":false,"name":"Ext.Function","inheritdoc":null,"tagname":"class","extends":null,"id":"class-Ext.Function","mixedInto":[],"alternateClassNames":[],"requires":[],"files":[{"href":"Function.html#Ext-Function","filename":"Function.js"}]});