Ext.data.JsonP.class({"guide":"<h1>Class System</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/class-section-1'>I. 概要</a></li>\n<li><a href='#!/guide/class-section-2'>II. 名付け規則</a></li>\n<li><a href='#!/guide/class-section-3'>III. ハンズオン</a></li>\n<li><a href='#!/guide/class-section-4'>IV. ダイナミック ローディング</a></li>\n</ol>\n</div>\n\n<p>Ext Serverには、Ext JS 4で採用されたのと共通したクラスシステムが実装されています。\nこれにより、Ext Serverではクラスベースのプログラミングをすることができます。</p>\n\n<h2 id='class-section-1'>I. 概要</h2>\n\n<p>JavaScriptはクラスレスのプロトタイプ指向言語です。\nこの言語の本来の最も強力な特徴の1つは柔軟性です。\nそのため同じ仕事を多くの方法で（コーディングスタイルやテクニックを使って）実装できます。\nしかし、そのことはコストの予測を難しくする原因でもあります。\n統一された構造のないJavaScriptコードは、理解にくく、メンテナンスや再利用がしやすいとはいえないもになる場合があります。</p>\n\n<p>一方、クラスベースのプログラミングというのは、オブジェクト指向モデルの中で最もポピュラーなものです。\nクラスベースの言語にはたいてい強固な型定義、カプセル化、標準的なコーディング規則があります。\n一般的に、開発者が膨大な規則に準拠して記述したコードは、時間が経っても読みやすく保守性や拡張性が高い傾向があります。\nしかしそれらの言語には、JavaScriptなどの言語で見られるような動的な機能はありません。\nどちらのアプローチも一長一短ですが、短所を隠しながら、両方の長所を同時に手にできないのでしょうか。\nExt JS 4やExt Serverのクラスシステムはそれを解決します。</p>\n\n<h2 id='class-section-2'>II. 名付け規則</h2>\n\n<h3>1) クラス</h3>\n\n<p>クラス名は英数字のみで記述します。数字は許されていますが、テクニカルタームでない限り使わない方がいいです。アンダースコアやハイフンなどの英数字以外の文字は使ってはいけません。例：</p>\n\n<ul>\n<li><code>MyCompany.useful_util.Debug_Toolbar</code> これはNGです。</li>\n<li><code>MyCompany.util.Base64</code> これはOKです。</li>\n</ul>\n\n\n<p>クラス名は、オブジェクトのプロパティのドット表記をうまく使って、パッケージごとにグループ化する必要があります。ユニークなトップレベルのネームスペースは一つだけにして、それにクラス名を続けます。例：</p>\n\n<ul>\n<li><code>MyCompany.data.CoolProxy</code></li>\n<li><code>MyCompany.Application</code></li>\n</ul>\n\n\n<p>トップレベルのネームスペースと実際のクラス名はアッパーキャメルケース（CamelCase）で書き、それ以外は全て小文字で書きます。例：</p>\n\n<ul>\n<li><code>MyCompany.form.action.AutoLoad</code></li>\n</ul>\n\n\n<p>Ext Server内部のものでないクラスは、Extをトップレベル名前空間として使わないでください。\nアクロニム（頭文字語）も同様にアッパーキャメルケースで表記してください。例：</p>\n\n<ul>\n<li><code>Ext.data.JSONProxy</code>ではなく<code>Ext.data.JsonProxy</code></li>\n<li><code>MyCompary.parser.HTMLParser</code>ではなく<code>MyCompany.util.HtmlParser</code></li>\n<li><code>MyCompany.server.HTTP</code>ではなく<code>MyCompany.server.Http</code></li>\n</ul>\n\n\n<h3>2) ソースファイル</h3>\n\n<p>クラスの名前は保存されているファイルパスにひもつけられます。結果として一つのファイルには一つのクラスだけが存在するということになります。例：</p>\n\n<ul>\n<li><code><a href=\"#!/api/Ext.util.Observable\" rel=\"Ext.util.Observable\" class=\"docClass\">Ext.util.Observable</a></code> は\n<code>path/to/src/Ext/util/Observable.js</code> に保存されます。</li>\n<li><code>Ext.form.action.Submit</code> は\n<code>path/to/src/Ext/form/action/Submit.js</code> に保存されます。</li>\n<li><code>MyCompany.chart.axis.Numeric</code> は\n<code>path/to/src/MyCompany/chart/axis/Numeric.js</code> に保存されます。</li>\n<li><code>/path/to/src</code>は、そのアプリケーションにおいてクラスが保存されるディレクトリです。すべてのクラスが一つのディレクトリ下にあって、適切なネームスペースに配置されていると、デプロイやメンテナンスのためになります。</li>\n</ul>\n\n\n<h3>3) メソッドと変数</h3>\n\n<p>クラス名と同様、メソッドや変数の名前も英数字のみで表記します。数字は許されていますが、テクニカルタームでない限り使わない方がいいです。アンダースコアやハイフンなどの英数字以外の文字は使ってはいけません。メソッドと変数の名前は常にキャメルケース（camelCase)で書きます。これはアクロニムにも適用されます。例：</p>\n\n<p>許容できるメソッド名:</p>\n\n<ul>\n<li>   <code>encodeUsingMd5()</code></li>\n<li>   <code>getHTML()</code> ではなく <code>getHtml()</code></li>\n<li>   <code>getJSONResponse()</code> ではなく <code>getJsonResponse()</code></li>\n<li>   <code>parseXMLContent()</code> ではなく <code>parseXmlContent()</code></li>\n</ul>\n\n\n<p>許容できる変数名:</p>\n\n<ul>\n<li>   <code>var isGoodName</code></li>\n<li>   <code>var base64Encoder</code></li>\n<li>   <code>var xmlReader</code></li>\n<li>   <code>var httpServer</code></li>\n</ul>\n\n\n<h3>4) プロパティ</h3>\n\n<p>クラスのプロパティ名は上記のメソッドや変数とほぼ同じ規則に従います。例外はそれが静的定数の場合です。\n定数を格納する静的なクラスプロパティは、すべて大文字で記述します。例：</p>\n\n<ul>\n<li><code>Ext.MessageBox.YES = \"Yes\"</code></li>\n<li><code>Ext.MessageBox.NO = \"No\"</code></li>\n<li><code>MyCompany.alien.Math.PI = \"4.13\"</code></li>\n</ul>\n\n\n<h2 id='class-section-3'>III. ハンズオン</h2>\n\n<h3>1. 宣言</h3>\n\n<p>Ext Serverでは<a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>でクラスの定義をします。クラスを作成するのに覚えなければならないのはこれだけです。基本的な構文:</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>({String} className, {Object} members, {Function} createdCallback);\n</code></pre>\n\n<ul>\n<li><code>className</code>: クラス名</li>\n<li><code>members</code>はキーと値のペアでクラスメンバのコレクションを表わすオブジェクトです。</li>\n<li><code>createCallback</code>はオプション関数で、このクラスのすべての依存関係が解決され、クラス自身が完全に生成された時にコールバックされます。クラス作成は非同期的に動作しますのでこのコールバックは多くの状況で役に立ちます。</li>\n</ul>\n\n\n<p><strong>例:</strong></p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.sample.Person', {\n    name: 'Unknown',\n\n    constructor: function(name) {\n        if (name) {\n            this.name = name;\n        }\n\n        return this;\n    },\n\n    eat: function(foodType) {\n        console.log(this.name + \" is eating: \" + foodType);\n\n        return this;\n    }\n});\n\nvar aaron = new My.sample.Person(\"Aaron\");\n    aaron.eat(\"Salad\"); // console.log(\"Aaron is eating: Salad\");\n</code></pre>\n\n<h3>2. コンフィグレーション</h3>\n\n<p>Ext Serverには、configプロパティがあり、<a href=\"#!/api/Ext.Class\" rel=\"Ext.Class\" class=\"docClass\">Ext.Class</a>プリプロセッサが処理します。\nコンフィグオプションは、このconfigプロパティの中に記述します。\nすると、クラスシステムがsetter、getterを自動的に生成してくれます。\nまた、apply+キャピタライズされたコンフィグ オプション名 というメソッドを定義しておくと、\nsetterが実行されるタイミングで呼び出されるので、任意の処理を挟み込むことができます。</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.test.Class', {\n   /** @readonly */\n    isWindow: true,\n\n    config: {\n        title: 'Title Here'\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n\n        return this;\n    },\n\n    applyTitle: function(title) {\n        if (!<a href=\"#!/api/Ext-method-isString\" rel=\"Ext-method-isString\" class=\"docClass\">Ext.isString</a>(title) || title.length === 0) {\n            console.log('Error: Title must be a valid non-empty string');\n        }\n        else {\n            return title;\n        }\n    }\n\n});\n</code></pre>\n\n<p>このように定義されたクラスの場合、次のようにgetter、setterが使用できます。</p>\n\n<pre><code>var myClass = new My.test.Class({\n    title: 'Hello World'\n});\n\nconsole.log(myClass.getTitle()); // \"Hello World\"\n\nmyClass.setTitle('Something New');\n\nconsole.log(myClass.getTitle()); // \"Something New\"\n\nmyClass.setTitle(null); // \"Error: Title must be a valid non-empty string\"\n\nconsole.log(myClass.getTitle()); // \"Something New\"\n</code></pre>\n\n<p>この機能により、</p>\n\n<ul>\n<li>My.test.Classクラスのコード量が減り、機能的になりました。</li>\n<li>コンフィグレーションは他のクラスのメンバーから完全にカプセル化されます。</li>\n<li>すでに定義済みでなければクラスが生成されるときに、すべてのコンフィグプロパティに対するsetterとgetterが、クラスのプロトタイプの中に自動的に生成されます。</li>\n</ul>\n\n\n<h3>Statics</h3>\n\n<p>staticsコンフィグオプションにオブジェクトリテラルを定義すると、\n静的メンバーを定義することができます。</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('Computer', {\n    statics: {\n        instanceCount: 0,\n        factory: function(brand) {\n            // 静的メソッド内でのthisはクラス自身を参照します\n            return new this({brand: brand});\n        }\n    },\n\n    config: {\n        brand: null\n    },\n\n    constructor: function(config) {\n        this.initConfig(config);\n\n        // インスタンスのselfプロパティはそのクラスを参照します\n        this.self.instanceCount ++;\n\n        return this;\n    }\n});\n\nvar dellComputer = Computer.factory('Dell');\nvar appleComputer = Computer.factory('Mac');\n\n// 自動生成されたgetterメソッドでコンフィグの値を取り出す\nconsole.log(appleComputer.getBrand());\n\nconsole.log(Computer.instanceCount); // Alerts \"2\"\n</code></pre>\n\n<h3>シングルトン</h3>\n\n<p>クラスのインスタンスが1つしか作成されないことを保証する、\nシングルトン パターンを実現するための機能があります。</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Singleton', {\n    singleton: true,\n    statics: {\n        staticMethod: function () {\n            console.log('staticMethod called.');\n        }\n    },\n    dynamicMethod: function() {\n        console.log('dynamicMethod called.');\n    }\n});\nMy.Singleton.dynamicMethod();\n// My.Singleton.staticMethod(); // 静的メンバにアクセスできない\n</code></pre>\n\n<p>オブジェクト リテラルにsingleton: trueと設定するだけです。\nクラスのインスタンス化もする必要はありません。\nシングルトンでは、静的メンバにあくせすすることはできません。</p>\n\n<h3>継承</h3>\n\n<p>クラスを継承する場合は、extendコンフィグを使います。\nextendコンフィグに継承元のクラス名を文字列で指定します。</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Class', {\n    extend: '<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>',\n    someMethod: function () {\n        console.log('My.Class.someMethod called.');\n    }\n});\n\nvar c = new My.Class;\n\nconsole.log(My.Class.getName());  // My.Class\nc.someMethod();                   // My.Class.someMethod called.\n</code></pre>\n\n<p>この例では、My.Classは<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>を継承しています。\n継承しているのを確認するために、\n<code>console.log(My.Class.getName());</code> と、<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>が持っているStaticメソッドを呼び出しています。</p>\n\n<p>継承元のクラスのメソッドを呼び出すにはcallParentを使います。</p>\n\n<pre><code>MyClass.callParent(arguments);\n</code></pre>\n\n<h3>Mixin</h3>\n\n<p>Mixinでは、再利用可能な振る舞いと設定の一式を定義し、既存のクラスに「ミックス」することができます。この機能をクラスで使うには、クラスを定義する際にMixinコンフィグを記述するだけです。\n例えば、あるクラスにイベント リスナー機能を持たせたい場合には、\n<a href=\"#!/api/Ext.util.Observable\" rel=\"Ext.util.Observable\" class=\"docClass\">Ext.util.Observable</a> Mixinを指定します。</p>\n\n<pre><code>mixin: ['<a href=\"#!/api/Ext.util.Observable\" rel=\"Ext.util.Observable\" class=\"docClass\">Ext.util.Observable</a>'],\n</code></pre>\n\n<p>クラスに適用できるMixinの数には制限はないので、多重継承を実現する方法として利用できます。</p>\n\n<h2 id='class-section-4'>IV. ダイナミック ローディング</h2>\n\n<p>前出の継承の例では、<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>を継承したクラスを作りましたが、\nその中で<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>の定義をしているソースファイルを読み込んでいないことにお気づきだったでしょうか。\nソースファイルを読み込んでいないに、どうしてExe.Baseを継承することができたのでしょう。</p>\n\n<p>Ext Serverでは、Ext JS 4で採用されたダイナミック ローディングを使うことができます。\nクライアント サイドにおけるダイナミック ローディングでは、\nデバッグ時に対象となるクラスの特定が簡単になるなどのメリットがありましたが、\nサーバー サイドでのダイナミック ローディングは素晴らしく便利です。</p>\n\n<p>前の例でも、このダイナミック ローディングが動作して、<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>を定義しているファイルを動的にロードしてくれていたのです。\nextendに指定したクラス名から、実際のクラス定義があるソースファイルの場所を導き出し、そのファイルをロードしたのです。</p>\n\n<pre><code><a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>('<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>', function() {\n    console.log(<a href=\"#!/api/Ext.Base-static-method-getName\" rel=\"Ext.Base-static-method-getName\" class=\"docClass\">Ext.Base.getName</a>());  // <a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>\n});\n</code></pre>\n\n<p>このように<a href=\"#!/api/Ext-method-require\" rel=\"Ext-method-require\" class=\"docClass\">Ext.require</a>メソッドを使うと、ロードするファイルを指定することができます。\nこのメソッドの第2引数に関数を渡すと、ロードが実行された後にその関数が呼び出されます。</p>\n\n<pre><code><a href=\"#!/api/Ext-method-define\" rel=\"Ext-method-define\" class=\"docClass\">Ext.define</a>('My.Class', {\n    extend: '<a href=\"#!/api/Ext.Base\" rel=\"Ext.Base\" class=\"docClass\">Ext.Base</a>',\n    requires: ['<a href=\"#!/api/Ext.util.Observable\" rel=\"Ext.util.Observable\" class=\"docClass\">Ext.util.Observable</a>'],\n    someMethod: function () {\n        console.log('My.Class.someMethod called.');\n    }\n});\n</code></pre>\n\n<p>また、上記のようにクラス定義のrequiresコンフィグにクラス名を配列でセットすると、\nそのクラスのファイルを読み込んでくれます。\nクラス間の依存関係を、このようにして定義しておくことができます。</p>\n","title":"Class System"});